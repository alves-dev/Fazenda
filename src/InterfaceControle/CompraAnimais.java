package InterfaceControle;

import ClassesDados.animais;
import ClassesDados.lotes;
import InterfaceCadastro.CadastroAnimal;
import java.awt.HeadlessException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.IncluirEditarDAO;
import persistencia.conexao;

/**
 *
 * @author helpdesk3
 */
public class CompraAnimais extends javax.swing.JFrame {

    lotes lote = new lotes();
    animais animais = new animais();
    IncluirEditarDAO lotAni;

    private String selecao;
    private int codSelecao;
    private int acaoCod;

    Date data = new Date();

    private int cod_fazenda;

    public CompraAnimais(int codFazenda) {
        cod_fazenda = codFazenda;

        initComponents();
        setExtendedState(MAXIMIZED_BOTH);

        DtAtaul.setDate(data);

        try {
            consultaStatus();
            consultaTipoAnimal();
            consultaPasto();
        } catch (SQLException ex) {
            Logger.getLogger(CadastroAnimal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public CompraAnimais() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTAnimaisIncluir = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jBSalvarAnimais = new javax.swing.JButton();
        jBGerarAnimais = new javax.swing.JButton();
        jTObs = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jBLimparTabela = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtTotalAnimais = new javax.swing.JTextField();
        comboQantidadeMachos = new javax.swing.JComboBox();
        jtAnimaisFemeas = new javax.swing.JTextField();
        jTIdade = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        DtAtaul = new com.toedter.calendar.JDateChooser();
        jtNumeroLote = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        comboStatus = new javax.swing.JComboBox<>();
        comboTipoAnimal = new javax.swing.JComboBox<>();
        comboRaca = new javax.swing.JComboBox<>();
        comboPasto = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTReaisArroba = new javax.swing.JTextField();
        jTTotalArroba = new javax.swing.JTextField();
        jTReaisManejo = new javax.swing.JTextField();
        jTReaisTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTMediaArroba = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compra de Animais");

        jTAnimaisIncluir.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sequencial", "Identificação 2", "Idade", "Status", "Pasto", "Tipo de Animal", "Raça", "Sexo", "Observação", "Lote"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTAnimaisIncluir);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jBSalvarAnimais.setText("Salvar Animais / Lote");
        jBSalvarAnimais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalvarAnimaisActionPerformed(evt);
            }
        });

        jBGerarAnimais.setText("Gerar animais");
        jBGerarAnimais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGerarAnimaisActionPerformed(evt);
            }
        });

        jLabel10.setText("Observações:");

        jBLimparTabela.setText("Limpar Tabela");
        jBLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimparTabelaActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de Animais:"));

        jLabel4.setText("Femêa:");

        jLabel5.setText("Machos:");

        jLabel3.setText("Total:");

        jtTotalAnimais.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtTotalAnimais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtTotalAnimaisActionPerformed(evt);
            }
        });
        jtTotalAnimais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtTotalAnimaisKeyReleased(evt);
            }
        });

        comboQantidadeMachos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0" }));
        comboQantidadeMachos.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboQantidadeMachosPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboQantidadeMachos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                comboQantidadeMachosKeyReleased(evt);
            }
        });

        jtAnimaisFemeas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtAnimaisFemeas.setEnabled(false);
        jtAnimaisFemeas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtAnimaisFemeasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtTotalAnimais, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtAnimaisFemeas, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboQantidadeMachos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtTotalAnimais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboQantidadeMachos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtAnimaisFemeas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTIdade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTIdadeActionPerformed(evt);
            }
        });

        jLabel11.setText("Idade:");

        DtAtaul.setEnabled(false);

        jtNumeroLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtNumeroLoteActionPerformed(evt);
            }
        });

        jLabel1.setText("Número do lote:");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Opções:"));

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "selecionar" }));

        comboTipoAnimal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "selecionar" }));
        comboTipoAnimal.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboTipoAnimalPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        comboTipoAnimal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                comboTipoAnimalKeyReleased(evt);
            }
        });

        comboRaca.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "selecionar" }));

        comboPasto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "selecionar" }));

        jLabel6.setText("Status:");

        jLabel7.setText("Tipo do Animal:");

        jLabel8.setText("Raça:");

        jLabel9.setText("Pasto:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboTipoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboRaca, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboPasto, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(comboTipoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(comboRaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(comboPasto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Totais:"));

        jLabel15.setText("R$ Total:");

        jLabel16.setText("Média de @ por animal:");

        jTReaisArroba.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTReaisArrobaKeyReleased(evt);
            }
        });

        jTTotalArroba.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTTotalArrobaKeyReleased(evt);
            }
        });

        jTReaisManejo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTReaisManejoKeyReleased(evt);
            }
        });

        jTReaisTotal.setEnabled(false);
        jTReaisTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTReaisTotalActionPerformed(evt);
            }
        });

        jLabel12.setText("R$ @:");

        jLabel13.setText("Total de @:");

        jLabel14.setText("R$ Manejo:");

        jTMediaArroba.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTReaisManejo)
                    .addComponent(jTTotalArroba)
                    .addComponent(jTReaisArroba)
                    .addComponent(jTReaisTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTMediaArroba, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTReaisArroba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel16)
                    .addComponent(jTMediaArroba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTTotalArroba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTReaisManejo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTReaisTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DtAtaul, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtNumeroLote, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBGerarAnimais, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(76, 76, 76)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBSalvarAnimais, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLimparTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTObs, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(DtAtaul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jtNumeroLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jTIdade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(91, 91, 91)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBLimparTabela)
                    .addComponent(jBGerarAnimais)
                    .addComponent(jBSalvarAnimais))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1365, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtNumeroLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtNumeroLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtNumeroLoteActionPerformed

    private void jtAnimaisFemeasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtAnimaisFemeasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtAnimaisFemeasActionPerformed

    private void jtTotalAnimaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtTotalAnimaisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtTotalAnimaisActionPerformed

    private void comboTipoAnimalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboTipoAnimalKeyReleased
        try {
            filtroRaca();
        } catch (SQLException ex) {
            Logger.getLogger(CompraAnimais.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboTipoAnimalKeyReleased

    private void comboTipoAnimalPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboTipoAnimalPopupMenuWillBecomeInvisible
        try {
            filtroRaca();
        } catch (SQLException ex) {
            Logger.getLogger(CompraAnimais.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboTipoAnimalPopupMenuWillBecomeInvisible

    private void jtTotalAnimaisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtTotalAnimaisKeyReleased
        calculaMacho();
        calculaMediaArroba();
    }//GEN-LAST:event_jtTotalAnimaisKeyReleased

    private void comboQantidadeMachosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboQantidadeMachosKeyReleased
        calculaFemea();
    }//GEN-LAST:event_comboQantidadeMachosKeyReleased

    private void comboQantidadeMachosPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboQantidadeMachosPopupMenuWillBecomeInvisible
        calculaFemea();
    }//GEN-LAST:event_comboQantidadeMachosPopupMenuWillBecomeInvisible

    private void jBGerarAnimaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGerarAnimaisActionPerformed
        gerarAnimais();
    }//GEN-LAST:event_jBGerarAnimaisActionPerformed

    private void jTIdadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTIdadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTIdadeActionPerformed

    private void jBLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimparTabelaActionPerformed
        limparTabela();

    }//GEN-LAST:event_jBLimparTabelaActionPerformed

    private void jBSalvarAnimaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalvarAnimaisActionPerformed
        if (verificacaoSalvarAnimais() == true && verificacaoSalvarLotes() == true) {

            int id;

            preencherLotes();

            try {
                lotAni = new IncluirEditarDAO();

                id = lotAni.IncluirLotes(lote);
                JOptionPane.showMessageDialog(this, "Lote " + id + " Salvo com sucesso!");

                int linhas = jTAnimaisIncluir.getRowCount();
                int linha = 0;
                while (linha < linhas) {
                    preencherAnimais(linha);
                    id = lotAni.IncluirAnimais(animais);
                    linha++;
                }
                JOptionPane.showMessageDialog(this, "Animais salvos com sucesso!");

                posSalvar();

            } catch (SQLException | HeadlessException error) {
                JOptionPane.showMessageDialog(this, "Operação não realizada" + error.getMessage());
            }

        }
    }//GEN-LAST:event_jBSalvarAnimaisActionPerformed

    private void jTReaisTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTReaisTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTReaisTotalActionPerformed

    private void jTTotalArrobaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTTotalArrobaKeyReleased
        calculaMediaArroba();
        calculaTotalCompra();
    }//GEN-LAST:event_jTTotalArrobaKeyReleased

    private void jTReaisArrobaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTReaisArrobaKeyReleased
        calculaTotalCompra();
    }//GEN-LAST:event_jTReaisArrobaKeyReleased

    private void jTReaisManejoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTReaisManejoKeyReleased
        calculaTotalCompra();
    }//GEN-LAST:event_jTReaisManejoKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompraAnimais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompraAnimais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompraAnimais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompraAnimais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompraAnimais().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DtAtaul;
    private javax.swing.JComboBox<String> comboPasto;
    private javax.swing.JComboBox comboQantidadeMachos;
    private javax.swing.JComboBox<String> comboRaca;
    private javax.swing.JComboBox<String> comboStatus;
    private javax.swing.JComboBox<String> comboTipoAnimal;
    private javax.swing.JButton jBGerarAnimais;
    private javax.swing.JButton jBLimparTabela;
    private javax.swing.JButton jBSalvarAnimais;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTAnimaisIncluir;
    private javax.swing.JTextField jTIdade;
    private javax.swing.JTextField jTMediaArroba;
    private javax.swing.JTextField jTObs;
    private javax.swing.JTextField jTReaisArroba;
    private javax.swing.JTextField jTReaisManejo;
    private javax.swing.JTextField jTReaisTotal;
    private javax.swing.JTextField jTTotalArroba;
    private javax.swing.JTextField jtAnimaisFemeas;
    private javax.swing.JTextField jtNumeroLote;
    private javax.swing.JTextField jtTotalAnimais;
    // End of variables declaration//GEN-END:variables

    private void consultaStatus() throws SQLException {

        conexao conexao = new conexao();
        conexao.getConexao();
        String selectSQL = "SELECT * FROM STATUS A ";

        Statement pstmtCon;
        pstmtCon = conexao.getConexao().createStatement();

        ResultSet rs = pstmtCon.executeQuery(selectSQL);

        while (rs.next()) {

            comboStatus.addItem(rs.getString("status"));

        }

        rs.close();
        pstmtCon.close();

    }

    private void consultaTipoAnimal() throws SQLException {

        conexao conexao = new conexao();
        conexao.getConexao();
        String selectSQL = "SELECT * FROM tipoAnimal A ";

        Statement pstmtCon;
        pstmtCon = conexao.getConexao().createStatement();

        ResultSet rs = pstmtCon.executeQuery(selectSQL);

        while (rs.next()) {

            comboTipoAnimal.addItem(rs.getString("descricao"));

        }

        rs.close();
        pstmtCon.close();

    }

    private void consultaPasto() throws SQLException {

        conexao conexao = new conexao();
        conexao.getConexao();
        String selectSQL = "SELECT * FROM pastos A where a.cod_fazenda = " + cod_fazenda;

        Statement pstmtCon;
        pstmtCon = conexao.getConexao().createStatement();

        ResultSet rs = pstmtCon.executeQuery(selectSQL);

        while (rs.next()) {

            comboPasto.addItem(rs.getString("pasto"));

        }

        rs.close();
        pstmtCon.close();

    }

    private void filtroRaca() throws SQLException {

        int index = comboTipoAnimal.getSelectedIndex();

        comboRaca.removeAllItems();
        comboRaca.addItem("Selecionar");
        comboRaca.setSelectedIndex(0);

        if (index > 0) {
            comboRaca.setEnabled(true);

            //comboRaca.setRequestFocusEnabled(true);
            String descricao = (String) comboTipoAnimal.getSelectedItem();

            conexao conexao = new conexao();
            conexao.getConexao();
            String selectSQL = "SELECT * FROM racaAnimais A WHERE A.tipoDescricao LIKE '" + descricao + "'";

            Statement pstmtCon;
            pstmtCon = conexao.getConexao().createStatement();

            ResultSet rs = pstmtCon.executeQuery(selectSQL);

            while (rs.next()) {

                comboRaca.addItem(rs.getString("raca"));

            }

            rs.close();
            pstmtCon.close();

        }
        if (index == 0) {
            comboRaca.setEnabled(false);
            comboRaca.setSelectedIndex(0);
        }

    }

    private void calculaMacho() {

        comboQantidadeMachos.removeAllItems();

        int total = Integer.parseInt(jtTotalAnimais.getText());

        int index = 0;
        while (index <= total) {
            comboQantidadeMachos.addItem(index);
            index++;
        }

    }

    private void calculaFemea() {

        int total = Integer.parseInt(jtTotalAnimais.getText());
        int macho = (int) comboQantidadeMachos.getSelectedItem();

        int femea = total - macho;

        jtAnimaisFemeas.setText(String.valueOf(femea));

    }

    private void gerarAnimais() {

        if (verifcacaoGerar() == true) {
            int aniMachos = 0, aniFemea = 0, index = 1, seque = 1, numeroLote = 0, idade = 0;
            String status = "", tipoAnimal = "", raca = "", pasto = "", obs = "";
            aniMachos = (int) comboQantidadeMachos.getSelectedItem();

            //validar se em branco
            if (!jtAnimaisFemeas.getText().equals("")) {
                aniFemea = Integer.parseInt(jtAnimaisFemeas.getText());
            }

            if (!jtNumeroLote.getText().equals("")) {
                numeroLote = Integer.parseInt(jtNumeroLote.getText());
            }
            if (!jTIdade.getText().equals("")) {
                idade = Integer.parseInt(jTIdade.getText());
            }

            status = (String) comboStatus.getSelectedItem();
            tipoAnimal = (String) comboTipoAnimal.getSelectedItem();
            raca = (String) comboRaca.getSelectedItem();
            pasto = (String) comboPasto.getSelectedItem();
            obs = jTObs.getText();

            while (index <= aniMachos) {

                DefaultTableModel tabela = (DefaultTableModel) jTAnimaisIncluir.getModel();
                tabela.addRow(new String[]{(String.valueOf(seque)), (""), (String.valueOf(idade)),
                    (status), (pasto), (tipoAnimal), (raca),
                    ("M"), (obs), (String.valueOf(numeroLote))});

                index++;
                seque++;
            }

            index = 1;

            while (index <= aniFemea) {

                DefaultTableModel tabela = (DefaultTableModel) jTAnimaisIncluir.getModel();
                tabela.addRow(new String[]{(String.valueOf(seque)), (""), (String.valueOf(idade)),
                    (status), (pasto), (tipoAnimal), (raca),
                    ("F"), (obs), (String.valueOf(numeroLote))});

                index++;
                seque++;
            }
        }
    }

    private void limparTabela() {
        DefaultTableModel tabela = (DefaultTableModel) jTAnimaisIncluir.getModel();
        int numeroLinhas = tabela.getRowCount();
        int index = 1;
        System.out.println(numeroLinhas);
        while (index <= numeroLinhas) {
            tabela.removeRow(0);
            index++;
        }
    }

    private boolean verifcacaoGerar() {
        boolean ok = false;

        int indexStatus = comboStatus.getSelectedIndex();
        int indexTipoAnimal = comboTipoAnimal.getSelectedIndex();
        int indexRaca = comboRaca.getSelectedIndex();
        int indexPasto = comboPasto.getSelectedIndex();

        if (indexStatus > 0 && indexTipoAnimal > 0 && indexRaca > 0 && indexPasto > 0) {
            ok = true; // se true, verificado com sucesso
        } else {
            JOptionPane.showMessageDialog(this, "Selecionar OPÇÕES");
        }

        return ok;
    }

    private boolean verificacaoSalvarAnimais() {
        boolean ok = false;

        int n = Integer.parseInt(jtTotalAnimais.getText());
        if (n == jTAnimaisIncluir.getRowCount()) {
            ok = true;
        } else {
            JOptionPane.showMessageDialog(this, "Quantidade de animais divergentes!");
        }

        return ok;
    }

    private boolean preencherLotes() {
        boolean ok = false;

        if (verificacaoSalvarLotes() == true) {

            lote.setCod_fazenda(cod_fazenda);

            if (!jtNumeroLote.getText().equals("")) {
                lote.setNumeroLote(Integer.parseInt(jtNumeroLote.getText()));
            } else {
                lote.setNumeroLote(0);
            }

            lote.setStatusLote("COMPRA");
            lote.setPasto((String) comboPasto.getSelectedItem());
            lote.setQtdAnimais_Compra(Integer.parseInt(jtTotalAnimais.getText()));
            lote.setQtdMachos_Compra((int) comboQantidadeMachos.getSelectedItem());
            lote.setQtdFemea_Compra(Integer.parseInt(jtAnimaisFemeas.getText()));
            lote.setRsArroba_Compra(Double.parseDouble(jTReaisArroba.getText()));
            lote.setRsManejo_Compra(Double.parseDouble(jTReaisManejo.getText()));

            lote.setRsTotal_Compra(Double.parseDouble(jTReaisTotal.getText()));
            lote.setKgArrobaTotal_Compra(Double.parseDouble(jTTotalArroba.getText()));

            lote.setKgArrobaMedia_Compra(Double.parseDouble(jTMediaArroba.getText()));
            lote.setIdade_Compra(Integer.parseInt(jTIdade.getText()));
            lote.setDt_Compra(data);
            lote.setDt_Venda(data);

            ok = true;
        }

        return ok;
    }

    private boolean verificacaoSalvarLotes() {
        boolean ok = false;

        if (!jTMediaArroba.getText().equals("") && !jTTotalArroba.getText().equals("") && !jTReaisArroba.getText().equals("")
                && !jTReaisManejo.getText().equals("") && !jTReaisTotal.getText().equals("") && jTAnimaisIncluir.getRowCount() > 0) {
            ok = true;
        } else {
            JOptionPane.showMessageDialog(this, "Preencher campos, obrigatorio!");
        }

        return ok;

    }

    private void calculaMediaArroba() {
        double totalArroba = 0;
        int totalAnimais = 0;

        if (!jtTotalAnimais.getText().equals("") && !jTTotalArroba.getText().equals("")) {

            totalArroba = Double.parseDouble(jTTotalArroba.getText());
            totalAnimais = Integer.parseInt(jtTotalAnimais.getText());

            Double result = totalArroba / totalAnimais;

            //String numero = converterDoubleString(result);
            double numero = converterDoubleDoisDecimais(result);

            jTMediaArroba.setText(String.valueOf(numero));
        }
    }

    public static String converterDoubleString(double precoDouble) {
        /*Transformando um double em 2 casas decimais*/
        DecimalFormat fmt = new DecimalFormat("0.00");   //limita o número de casas decimais    
        String string = fmt.format(precoDouble);
        String[] part = string.split("[,]");
        String preco = part[0] + "." + part[1];
        return preco;
    }

    public static double converterDoubleDoisDecimais(double precoDouble) {
        DecimalFormat fmt = new DecimalFormat("0.00");
        String string = fmt.format(precoDouble);
        String[] part = string.split("[,]");
        String string2 = part[0] + "." + part[1];
        double preco = Double.parseDouble(string2);
        return preco;
    }

    private boolean preencherAnimais(int linha) {
        boolean ok = false;

        if (verificacaoSalvarAnimais() == true) {

            animais.setIdentificacao2((String) jTAnimaisIncluir.getValueAt(linha, 1));

            // acaoCod: 1 = Satatus / 2 = tipo de animal / 3 = raça / 4 =pasto
            animais.setStatus((String) comboStatus.getSelectedItem());

            acaoCod = 1;
            selecao = animais.getStatus();
            try {
                codSelecaoCombo();
            } catch (SQLException ex) {
                Logger.getLogger(CadastroAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }

            animais.setCod_status(codSelecao);

            animais.setTipoAnimal((String) comboTipoAnimal.getSelectedItem());

            acaoCod = 2;
            selecao = animais.getTipoAnimal();
            try {
                codSelecaoCombo();
            } catch (SQLException ex) {
                Logger.getLogger(CadastroAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }

            animais.setCod_tipoAnimal(codSelecao);

            animais.setRaca((String) comboRaca.getSelectedItem());

            acaoCod = 3;
            selecao = animais.getRaca();
            try {
                codSelecaoCombo();
            } catch (SQLException ex) {
                Logger.getLogger(CadastroAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }

            animais.setCod_raca(codSelecao);

            animais.setIdade(Integer.parseInt((String) jTAnimaisIncluir.getValueAt(linha, 2)));

            animais.setPasto((String) comboPasto.getSelectedItem());

            acaoCod = 4;
            selecao = animais.getPasto();
            try {
                codSelecaoCombo();
            } catch (SQLException ex) {
                Logger.getLogger(CadastroAnimal.class.getName()).log(Level.SEVERE, null, ex);
            }

            animais.setCod_pasto(codSelecao);
            animais.setLoteCompra(Integer.parseInt((String) jTAnimaisIncluir.getValueAt(linha, 9)));
            animais.setLoteVenda(0);

            String sexo = (String) jTAnimaisIncluir.getValueAt(linha, 7);
            if ("F".equals(sexo)) {
                animais.setSexo('F');
            } else {
                animais.setSexo('M');
            }

            animais.setObs((String) jTAnimaisIncluir.getValueAt(linha, 8));
            animais.setDtCadastro(data);
            animais.setDtUltimaAteracao(data);
            animais.setCod_fazenda(cod_fazenda);

            ok = true;
        }
        return ok;

    }

    // usado para indentificar os codigos das palavras dos combos box
    private void codSelecaoCombo() throws SQLException {

        conexao conexao = new conexao();
        conexao.getConexao();

        String selectSQL = "";
        if (acaoCod == 1) {
            selectSQL = "SELECT * FROM status A WHERE A.status LIKE '" + selecao + "'";
        }
        if (acaoCod == 2) {
            selectSQL = "SELECT * FROM tipoAnimal A WHERE A.descricao LIKE '" + selecao + "'";
        }
        if (acaoCod == 3) {
            selectSQL = "SELECT * FROM racaAnimais A WHERE A.raca LIKE '" + selecao + "'";
        }
        if (acaoCod == 4) {
            selectSQL = "SELECT * FROM pastos A WHERE A.pasto LIKE '" + selecao + "'";
        }

        Statement pstmtCon;
        pstmtCon = conexao.getConexao().createStatement();

        ResultSet rs = pstmtCon.executeQuery(selectSQL);

        while (rs.next()) {

            if (acaoCod == 1) {
                codSelecao = Integer.parseInt(rs.getString("cod_status"));
            }
            if (acaoCod == 2) {
                codSelecao = Integer.parseInt(rs.getString("cod_tipo"));
            }
            if (acaoCod == 3) {
                codSelecao = Integer.parseInt(rs.getString("cod_raca"));
            }
            if (acaoCod == 4) {
                codSelecao = Integer.parseInt(rs.getString("cod_pasto"));
            }
        }

        rs.close();
        pstmtCon.close();

    }

    private void posSalvar() {

    }

    private void calculaTotalCompra() {
        double reaisTotal = 0, reaisManejo = 0, totalArroba = 0, reaisArroba = 0;

        if (!jTReaisArroba.getText().equals("")) {
            reaisArroba = Double.parseDouble(jTReaisArroba.getText());
        }
        if (!jTTotalArroba.getText().equals("")) {
            totalArroba = Double.parseDouble(jTTotalArroba.getText());
        }
        if (!jTReaisManejo.getText().equals("")) {
            reaisManejo = Double.parseDouble(jTReaisManejo.getText());
        }

        reaisTotal = (reaisArroba * totalArroba) + reaisManejo;

        jTReaisTotal.setText(String.valueOf(reaisTotal));
    }
}
